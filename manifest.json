{
  "id": "mangafreak",
  "name": "MangaFreak",
  "description": "MangaFreak is a manga provider for Seanime",
  "manifestURI": "https://raw.githubusercontent.com/Pal-droid/Mangafreak-seanime/main/manifest.json",
  "version": "1.0.0",
  "author": "weezer",
  "type": "manga",
  "language": "typescript",
  "lang": "en",
  "payload": "/// <reference path=\\\"./manga-provider.d.ts\\\" />\\nimport { load } from \\\"cheerio\\\";\\n\\nclass Provider {\\n\\n    private baseUrl = \\\"https://ww2.mangafreak.me\\\";\\n\\n    getSettings(): Settings {\\n        return {\\n            supportsMultiLanguage: false,\\n            supportsMultiScanlator: false,\\n        };\\n    }\\n\\n    async search(opts: QueryOptions): Promise<SearchResult[]> {\\n        const res = await fetch(`${this.baseUrl}/Find/${encodeURIComponent(opts.query)}`);\\n        const html = await res.text();\\n        const $ = load(html);\\n\\n        const results: SearchResult[] = [];\\n\\n        $(\\\".manga_search_item\\\").each((i, el) => {\\n            const link = $(el).find(\\\"a\\\").first().attr(\\\"href\\\")!;\\n            const title = $(el).find(\\\"h3 a\\\").text().trim();\\n            const image = $(el).find(\\\"img\\\").attr(\\\"src\\\") ?? \\\"\\\";\\n            results.push({\\n                id: link.replace(\\\"/Manga/\\\", \\\"\\\"),\\n                title,\\n                image: image.startsWith(\\\"http\\\") ? image : this.baseUrl + image,\\n            });\\n        });\\n\\n        return results;\\n    }\\n\\n    async findChapters(mangaId: string): Promise<ChapterDetails[]> {\\n        const res = await fetch(`${this.baseUrl}/Manga/${mangaId}`);\\n        const html = await res.text();\\n        const $ = load(html);\\n\\n        const chapters: ChapterDetails[] = [];\\n\\n        $(\\\"tr\\\").each((i, el) => {\\n            const linkEl = $(el).find(\\\"td a\\\");\\n            const link = linkEl.attr(\\\"href\\\");\\n            const title = linkEl.text().trim();\\n            const date = $(el).find(\\\"td\\\").eq(1).text().trim();\\n\\n            if (link) {\\n                chapters.push({\\n                    id: link.replace(\\\"/Read1_\\\", \\\"\\\"),\\n                    url: this.baseUrl + link,\\n                    title,\\n                    chapter: title.match(/\\d+/)?.[0] ?? \\\"Oneshot\\\",\\n                    index: i,\\n                    updatedAt: date,\\n                });\\n            }\\n        });\\n\\n        return chapters;\\n    }\\n\\n    async findChapterPages(chapterId: string): Promise<ChapterPage[]> {\\n        const res = await fetch(`${this.baseUrl}/Read1_${chapterId}`);\\n        const html = await res.text();\\n        const $ = load(html);\\n\\n        const pages: ChapterPage[] = [];\\n\\n        $(\\\"div.image_orientation img\\\").each((i, el) => {\\n            const url = $(el).attr(\\\"src\\\")!;\\n            pages.push({\\n                url,\\n                index: i,\\n                headers: {\\n                    Referer: this.baseUrl,\\n                },\\n            });\\n        });\\n\\n        return pages;\\n    }\\n}\\n\\nexport default Provider;"
}
